/** +++====+++
 *  
 *  Copyright (c) Timothy Baxendale
 *
 *  +++====+++
**/
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".Generated.cs" #>
using System;

namespace Slang.Types
{
	public partial struct Number 
	{
<#
	BuildAllMaths();
#>
	}
}

<#+

private void BuildAllMaths()
{
	BuildMathOp("+", "Adds", "to");
	BuildMathOp("-", "Subtracts", "from");
	BuildMathOp("*", "Multiplies", "by");
	BuildMathOp("/", "Divides", "by");
	BuildMathOp("%", "Performs a modulus operation on", "using");
}

private void BuildMathOp(string op, string descrip, string prep)
{
#>
        /// <summary>
        /// <#= descrip #> one number <#= prep #> another number
        /// </summary>
        /// <param name="left">the left operand</param>
        /// <param name="right">the right operand</param>
        /// <returns>a Number with the resulting value</returns>
        public static Number operator <#= op #>(Number left, Number right)
        {
            return new Number(left.Value <#= op #> right.Value);
        }
<#+
}
#>