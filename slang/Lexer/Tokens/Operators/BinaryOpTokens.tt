/** +++====+++
 *  
 *  Copyright (c) Timothy Baxendale
 *
 *  +++====+++
**/
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".Generated.cs" #>
using System;
using System.Collections.Generic;

namespace Slang.Lexer.Tokens
{<#BuildOperator("Dot", ".", 2, "Left");#>
<#BuildOperator("Multiplication", "*", 5);#>
<#BuildOperator("Division", "/", 5);#>
<#BuildOperator("Modulo", "%", 5);#>
<#BuildOperator("Add", "+", 6);#>
<#BuildOperator("Subtract", "-", 6);#>
<#BuildOperator("ShiftRight", ">>", 7);#>
<#BuildOperator("ShiftLeft", "<<", 7);#>
<#BuildOperator("GreaterThan", ">", 8);#>
<#BuildOperator("LessThanOrEqual", "<=", 8);#>
<#BuildOperator("LessThanOrEqual2", "=<", 8);#>
<#BuildOperator("GreaterThanOrEqual", ">=", 8);#>
<#BuildOperator("GreaterThanOrEqual2", "=<", 8);#>
<#BuildOperator("Equality", "==", 9);#>
<#BuildOperator("SortaEquals", "~=", 9);#>
<#BuildOperator("Inequality", "!=", 9);#>
<#BuildOperator("Inequality2", "<>", 9);#>
<#BuildOperator("BitAnd", "&", 10);#>
<#BuildOperator("BitXor", "^", 11);#>
<#BuildOperator("BitOr", "|", 12);#>
<#BuildOperator("And", "&&", 13);#>
<#BuildOperator("And2", "AND", 13);#>
<#BuildOperator("Or", "||", 14);#>
<#BuildOperator("Or2", "OR", 14);#>
<#BuildOperator("Set", "=", 16, "Right");#>
}

<#+
void BuildOperator(string name, string strOp, int precedence, string operand = "Both")
{
#>

    /// <summary>
    /// Implementation of the <#=name#>OperatorFactory
    /// </summary>
    public partial class <#=name#>OperatorFactory : BinaryOperatorFactory
    {
        /// <summary>
        /// Gets the string representation of the operator
        /// </summary>
        public override string OperatorString => "<#=strOp#>";

        /// <summary>
        /// Gets the operator precedence. Lower precedence operators are processed first
        /// </summary>
        public override int Precedence => <#=precedence#>;

        /// <summary>
        /// Gets which operand should be evaluated
        /// </summary>
        public override OperandPosition EvaulatedOperand => OperandPosition.<#=operand#>;
    }
<#+
}
#>
