/** +++====+++
 *  
 *  Copyright (c) Timothy Baxendale
 *
 *  +++====+++
**/
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".Generated.cs" #>
using System;
using System.Collections.Generic;

namespace Slang.Lexer.Scanners.TBasic
{<#BuildOperator("New", "new", "NEW", evaluate: false);#>
<#BuildOperator("Positive", "positive", "+");#>
<#BuildOperator("Negative", "negative", "-");#>
<#BuildOperator("Not", "boolean not", "NOT");#>
<#BuildOperator("BitNot", "inverse bit", "~");#>
}

<#+
void BuildOperator(string name, string friendly, string strOp, bool evaluate = true)
{
#>

    /// <summary>
    /// Implementation of the <#=friendly#> operator
    /// </summary>
    public class TBasic<#=name#>Operator : UnaryOperatorFactory
    {
        /// <summary>
        /// Gets the string representation of the operator
        /// </summary>
        public override string OperatorString => "<#=strOp#>";

        public override bool EvaluateOperand => <#=evaluate.ToString().ToLower()#>;
    }
<#+
}
#>
